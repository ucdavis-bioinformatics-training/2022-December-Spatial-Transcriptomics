resolution = seq(0.25,4,0.5),
verbose = FALSE
)
head(experiment.aggregate[[]])
sapply(grep("res",colnames(experiment.aggregate@meta.data),value = TRUE),
function(x) length(unique(experiment.aggregate@meta.data[,x])))
experiment.aggregate <- RunTSNE(
object = experiment.aggregate,
reduction.use = "pca",
dims = use.pcs,
do.fast = TRUE)
DimPlot(object = experiment.aggregate, group.by=grep("res",colnames(experiment.aggregate@meta.data),value = TRUE)[1:4], ncol=2 , pt.size=3.0, reduction = "tsne", label = T)
DimPlot(object = experiment.aggregate, group.by=grep("res",colnames(experiment.aggregate@meta.data),value = TRUE)[5:8], ncol=2 , pt.size=3.0, reduction = "tsne", label = T)
Idents(experiment.aggregate) <- "RNA_snn_res.1.25"
table(Idents(experiment.aggregate),experiment.aggregate$orig.ident)
DimPlot(object = experiment.aggregate, pt.size=0.5, reduction = "tsne", label = T)
experiment.aggregate <- RunUMAP(
object = experiment.aggregate,
dims = use.pcs)
DimPlot(object = experiment.aggregate, pt.size=0.5, group.by = "Phase", reduction = "umap" )
FeaturePlot(experiment.aggregate, features = c('nCount_RNA'), pt.size=0.5)
FeaturePlot(experiment.aggregate, features = c('nFeature_RNA'), pt.size=0.5)
FeaturePlot(experiment.aggregate, features = c('percent.mito'), pt.size=0.5)
Idents(experiment.aggregate) <- "RNA_snn_res.1.25"
experiment.aggregate <- BuildClusterTree(
experiment.aggregate, dims = use.pcs)
PlotClusterTree(experiment.aggregate)
DimPlot(object = experiment.aggregate, pt.size=0.5, label = TRUE, reduction = "umap")
DimPlot(object = experiment.aggregate, pt.size=0.5, label = TRUE, reduction = "umap")
DimPlot(experiment.aggregate, pt.size = 0.5, label = TRUE, reduction = "tsne")
experiment.merged = experiment.aggregate
Idents(experiment.merged) <- "RNA_snn_res.1.25"
experiment.merged <- RenameIdents(
object = experiment.merged,
'9' = '0',
'6' = '1',
'11' = '1'
)
table(Idents(experiment.merged))
DimPlot(object = experiment.merged, pt.size=0.5, label = T, reduction = "umap")
VlnPlot(object = experiment.merged, features = "percent.mito", pt.size = 0.05)
experiment.merged = experiment.aggregate
Idents(experiment.merged) <- "RNA_snn_res.1.25"
experiment.merged <- RenameIdents(
object = experiment.merged,
'9' = '0',
'6' = '1',
'11' = '1'
)
table(Idents(experiment.merged))
DimPlot(object = experiment.merged, pt.size=0.5, label = T, reduction = "umap")
DimPlot(experiment.merged, pt.size = 0.5, label = TRUE, reduction = "tsne" )
VlnPlot(object = experiment.merged, features = "percent.mito", pt.size = 0.05)
experiment.examples <- experiment.merged
levels(experiment.examples@active.ident)
experiment.examples@active.ident <- relevel(experiment.examples@active.ident, "12")
levels(experiment.examples@active.ident)
# now cluster 12 is the "first" factor
DimPlot(object = experiment.examples, pt.size=0.5, label = T, reduction = "umap")
VlnPlot(object = experiment.examples, features = "percent.mito", pt.size = 0.05)
# relevel all the factors to the order I want
Idents(experiment.examples) <- factor(experiment.examples@active.ident, levels=c("12","3","4","13","0","1","2","5","7", "8", "10"))
levels(experiment.examples@active.ident)
DimPlot(object = experiment.examples, pt.size=0.5, label = T, reduction = "umap")
newIdent = as.character(Idents(experiment.examples))
newIdent[newIdent == '0'] = paste0("R",as.character(experiment.examples$RNA_snn_res.3.75[newIdent == '0']))
Idents(experiment.examples) <- as.factor(newIdent)
table(Idents(experiment.examples))
DimPlot(object = experiment.examples, pt.size=0.5, label = T, reduction = "umap")
DimPlot(object = experiment.aggregate, group.by="orig.ident", pt.size=0.5, reduction = "umap" )
DimPlot(object = experiment.aggregate, group.by="orig.ident", pt.size=0.5, reduction = "umap", shuffle = TRUE)
## Pretty umap using alpha
alpha.use <- 2/5
p <- DimPlot(object = experiment.aggregate, group.by="orig.ident", pt.size=0.5, reduction = "umap", shuffle = TRUE)
p$layers[[1]]$mapping$alpha <- alpha.use
p + scale_alpha_continuous(range = alpha.use, guide = F)
# create a new tmp object with those removed
experiment.aggregate.tmp <- experiment.aggregate[,-which(Idents(experiment.aggregate) %in% c("6"))]
dim(experiment.aggregate)
dim(experiment.aggregate.tmp)
DimPlot(object = experiment.aggregate.tmp, pt.size=0.5, reduction = "umap", label = T)
# create a new tmp object with those removed
experiment.aggregate.tmp <- experiment.aggregate[,-which(Idents(experiment.aggregate) %in% c("7"))]
dim(experiment.aggregate)
dim(experiment.aggregate.tmp)
DimPlot(object = experiment.aggregate.tmp, pt.size=0.5, reduction = "umap", label = T)
markers = FindMarkers(experiment.aggregate, ident.1=c(3,7), ident.2 = c(4,5))
head(markers)
dim(markers)
table(markers$avg_log2FC > 0)
table(markers$p_val_adj < 0.05 & markers$avg_log2FC > 0)
VlnPlot(object = experiment.aggregate, features = rownames(markers)[1:2], pt.size = 0.05)
FeaturePlot(
experiment.aggregate,
"KLRD1",
cols = c("lightgrey", "blue"),
ncol = 2
)
experiment.merged$finalcluster <- Idents(experiment.merged)
head(experiment.merged[[]])
markers_all <- FindAllMarkers(
object = experiment.merged,
only.pos = TRUE,
min.pct = 0.25,
thresh.use = 0.25
)
dim(markers_all)
head(markers_all)
table(table(markers_all$gene))
markers_all_single <- markers_all[markers_all$gene %in% names(table(markers_all$gene))[table(markers_all$gene) == 1],]
dim(markers_all_single)
table(table(markers_all_single$gene))
table(markers_all_single$cluster)
head(markers_all_single)
top10 <- markers_all_single %>% group_by(cluster) %>% top_n(10, avg_log2FC)
DoHeatmap(
object = experiment.merged,
features = top10$gene
)
# Get expression of genes for cells in and out of each cluster
getGeneClusterMeans <- function(gene, cluster){
x <- GetAssayData(experiment.merged)[gene,]
m <- tapply(x, ifelse(Idents(experiment.merged) == cluster, 1, 0), mean)
mean.in.cluster <- m[2]
mean.out.of.cluster <- m[1]
return(list(mean.in.cluster = mean.in.cluster, mean.out.of.cluster = mean.out.of.cluster))
}
## for sake of time only using first six (head)
means <- mapply(getGeneClusterMeans, head(markers_all[,"gene"]), head(markers_all[,"cluster"]))
means <- matrix(unlist(means), ncol = 2, byrow = T)
colnames(means) <- c("mean.in.cluster", "mean.out.of.cluster")
rownames(means) <- head(markers_all[,"gene"])
markers_all2 <- cbind(head(markers_all), means)
head(markers_all2)
experiment.clusters <- experiment.aggregate
experiment.clusters <- RenameIdents(
object = experiment.clusters,
'0' = 'cell_type_A',
'1' = 'cell_type_B',
'2' = 'cell_type_C'
)
# and so on
DimPlot(object = experiment.clusters, pt.size=0.5, label = T, reduction = "tsne")
experiment.merged$finalcluster <- Idents(experiment.merged)
head(experiment.merged[[]])
table(experiment.merged$finalcluster, experiment.merged$orig.ident)
experiment.sample2 <- subset(experiment.merged, orig.ident == "conv_COVID")
DimPlot(object = experiment.sample2, group.by = "RNA_snn_res.0.25", pt.size=0.5, label = TRUE, reduction = "tsne")
experiment.batch1 <- subset(experiment.merged, batchid == "Batch1")
experiment.sample2 <- subset(experiment.merged, orig.ident == "conv_COVID")
DimPlot(object = experiment.sample2, group.by = "RNA_snn_res.0.25", pt.size=0.5, label = TRUE, reduction = "tsne")
experiment.sample1 <- subset(experiment.merged, orig.ident == "conv_COVID")
DimPlot(object = experiment.sample1, group.by = "RNA_snn_res.0.25", pt.size=0.5, label = TRUE, reduction = "tsne")
experiment.merged$samplecluster = paste(experiment.merged$orig.ident,experiment.merged$finalcluster,sep = '-')
# set the identity to the new variable
Idents(experiment.merged) <- "samplecluster"
markers.comp <- FindMarkers(experiment.merged, ident.1 = c("PBMC2-7","PBMC3-7"), ident.2= "PBMC2-5")
experiment.merged$samplecluster = paste(experiment.merged$orig.ident,experiment.merged$finalcluster,sep = '-')
# set the identity to the new variable
Idents(experiment.merged) <- "samplecluster"
markers.comp <- FindMarkers(experiment.merged, ident.1 = c("conv_COVID-0","conv_MMR-0"), ident.2= "conv_Tdap-0")
head(markers.comp)
experiment.subset <- subset(experiment.merged, samplecluster %in%  c( "conv_COVID-0", "conv_MMR-0", "conv_Tdap-0" ))
DoHeatmap(experiment.subset, features = head(rownames(markers.comp),20))
Idents(experiment.merged) <- "finalcluster"
ls()
grep('experiment', ls())
grep('experiment', ls(), value = TRUE)
save(list=grep('experiment', ls(), value = TRUE), file="clusters_seurat_object.RData")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/master/data_analysis/scRNA_Workshop-PART6.Rmd", "scRNA_Workshop-PART6.Rmd")
options(width = 450)
library(Seurat)
library(ggplot2)
library(limma)
library(topGO)
library(WGCNA)
install.packages("impute")
BiocManager::install("WGCNA")
BiocManager::install("rgdal")
BiocManager::install("rgdal")
library(WGCNA)
setwd("~/Desktop/scRNA_shiny/")
shiny::runApp()
setwd("~/Desktop/Godinez_D_Tag-Seq/")
counts <- read.delim("Godinez_Tag0088_counts.txt", row.names = 1)
head(counts)
length(which(rowSums(counts) >= 1))
28626 - 15036
d0 <- DGEList(counts)
library("edgeR")
library("RColorBrewer")
library("viridis")
library("gplots")
library("kableExtra")
library("topGO")
library("pathview")
library("KEGGREST")
library("org.Hs.eg.db")
d0 <- DGEList(counts)
anno <- read.delim("ensg_hs_105_20211220.tsv", as.is=TRUE)
anno <- anno[!duplicated(anno$Gene.stable.ID),]
metadata <- read.csv("Godinez_D_metadata_TAG0088.csv")
d0 <- calcNormFactors(d0)
cutoff <- 3
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
str(d)
d$counts
rownames(d$counts)
rownames(counts)
rownames(counts) %in% rownames(d$counts)
!(rownames(counts) %in% rownames(d$counts))
rownames(counts)[!(rownames(counts) %in% rownames(d$counts))]
counts[!(rownames(counts) %in% rownames(d$counts)),]
rowSums(counts[!(rownames(counts) %in% rownames(d$counts)),])
summary(rowSums(counts[!(rownames(counts) %in% rownames(d$counts)),]))
rowSums(d0[drop,])
rowSums(d0$counts[drop,])
summary(rowSums(d0$counts[drop,]))
rowSums(d0[drop,]) >= 1
rowSums(d0$counts[drop,]) >= 1
rowSums(d0$counts[drop,])[rowSums(d0$counts[drop,]) >= 1]
summary(rowSums(d0$counts[drop,])[rowSums(d0$counts[drop,]) >= 1])
summary(rowSums(d$counts))
library("edgeR")
library("RColorBrewer")
library("viridis")
library("gplots")
library("kableExtra")
library("topGO")
library("pathview")
library("KEGGREST")
library("org.Hs.eg.db")
counts <- read.delim("Godinez_Tag0088_counts.txt", row.names = 1)
d0 <- DGEList(counts)
anno <- read.delim("ensg_hs_105_20211220.tsv", as.is=TRUE)
anno <- anno[!duplicated(anno$Gene.stable.ID),]
metadata <- read.csv("Godinez_D_metadata_TAG0088.csv")
# set new groups for preliminary contrasts per email of 3 January
metadata$group.2 <- factor(sub("E", 3,
sub("C", 3,
sub("J", 2,
sub("B", 1, metadata$Group)))))
# reorder rows of metadata to match columns of counts table
metadata <- metadata[match(colnames(counts), metadata$Sample_ID),]
# genes of interest per email of 12 January 2022
genes <- c("CBFB", "RUNX1", "RUNX2", "RUNX3", "TLN1", "PTK2",
"MMP9", "MMP13", "VEGFA", "WNT1", "TFGB1", "TNFA",
"EGF", "CDKN1A", "HNRNPK", "EIF4B", "MYC", "SMURF1",
"HIF1A", "TP53", "BIRC3", "BGLAP", "RING1", "ALPL")
d0 <- calcNormFactors(d0)
cutoff <- 3
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
plot.colors <- viridis::turbo(length(unique(metadata$group.2)))
plotMDS(d, col = plot.colors[as.numeric(metadata$group.2)], cex = 0.75)
logcpm <- cpm(d, prior.count=2, log=TRUE)
write.table(logcpm,
"Godinez_D_TagSeq_normalized_counts.txt",
sep="\t",
quote=FALSE)
group <- metadata$group.2
mm <- model.matrix(~0 + group)
y <- voom(d, mm, plot = T)
fit <- lmFit(y, mm)
ensid <- anno[which(!is.na(match(anno$HGNC.symbol, genes))), "Gene.stable.ID"]
hgnc <- anno[which(!is.na(match(anno$HGNC.symbol, genes))), "HGNC.symbol"]
ensid <- ensid[ensid %in% rownames(logcpm)]
hgnc <- hgnc[ensid %in% rownames(logcpm)]
heatmap.2(logcpm[ensid,],
col=brewer.pal(11,"RdBu"),
scale="row",
trace="none",
labRow = hgnc,
cexRow = 0.5,
cexCol = 0.5)
setwd("../../Documents/Jobs/bioinformatics_training_program/workshop_documentation/2022-March-Single-Cell-RNA-Seq-Analysis/data_analysis/")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/main/data_analysis/scRNA_Workshop-PART1.Rmd", "scRNA_Workshop-PART1.Rmd")
options(timeout=1200)
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/main/data_analysis/expression_data_cellranger.zip", "expression_data_cellranger.zip")
options(timeout=1200)
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/main/datasets/expression_data_cellranger.zip", "expression_data_cellranger.zip")
system("unzip expression_data_cellranger.zip") # works in Linux and Mac, not sure about Windows"
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/master/data_analysis/scRNA_Workshop-PART2.Rmd", "scRNA_Workshop-PART2.Rmd")
# must have Seurat
library(Seurat)
library(kableExtra)
library(ggplot2)
experiment_name = "Covid Example"
dataset_loc <- "./expression_data_cellranger"
ids <- c("conv_COVID", "conv_MMR", "conv_Tdap", "norm_COVID")
experiment.metrics <- read.csv(file.path(dataset_loc, "metrics_summary.csv"))
sequencing.metrics <- data.frame(t(experiment.metrics[,c(1:19)]))
rownames(sequencing.metrics) <- gsub("\\.", " ", rownames(sequencing.metrics))
colnames(sequencing.metrics) <- "All samples"
sequencing.metrics %>%
kable(caption = 'Cell Ranger Results') %>%
pack_rows("Overview", 1, 3, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Sequencing Characteristics", 4, 9, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Mapping Characteristics", 10, 19, label_row_css = "background-color: #666; color: #fff;") %>%
kable_styling("striped")
d10x.metrics <- lapply(ids, function(i){
metrics <- read.csv(file.path(dataset_loc,paste0(i,"/outs"),"metrics_summary.csv"), colClasses = "character")
})
getwd()
getwd()
d10x.data <- lapply(ids, function(i){
d10x <- Read10X_h5(file.path(dataset_loc, i, "/outs","raw_feature_bc_matrix.h5"))
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"),'[[',1L),i,sep="-")
d10x
})
names(d10x.data) <- ids
str(d10x.data)
plot_cellranger_cells <- function(ind){
xbreaks = c(1,1e1,1e2,1e3,1e4,1e5,1e6)
xlabels = c("1","10","100","1000","10k","100K","1M")
ybreaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000,10000,20000,50000,100000,200000,500000,1000000)
ylabels = c("1","2","5","10","2","5","100","2","5","1000","2","5","10k","2","5","100K","2","5","1M")
pl1 <- data.frame(index=seq.int(1,ncol(d10x.data[[ind]])),
nCount_RNA = sort(Matrix:::colSums(d10x.data[[ind]])+1,decreasing=T),
nFeature_RNA = sort(Matrix:::colSums(d10x.data[[ind]]>0)+1,decreasing=T)) %>%
ggplot() +
scale_color_manual(values=c("red2","blue4"), labels=c("Features", "UMI"), name=NULL) +
ggtitle(paste("CellRanger filltered cells:",ids[ind],sep=" ")) + xlab("Barcodes") + ylab("counts (UMI or Features") +
scale_x_continuous(trans = 'log2', breaks=xbreaks, labels = xlabels) +
scale_y_continuous(trans = 'log2', breaks=ybreaks, labels = ylabels) +
geom_line(aes(x=index, y=nCount_RNA, color = "UMI"), size=1.75) +
geom_line(aes(x=index, y=nFeature_RNA, color = "Features"), size=1.25)
return(pl1)
}
plot_cellranger_cells(1)
plot_cellranger_cells(2)
plot_cellranger_cells(3)
plot_cellranger_cells(4)
experiment.data <- do.call("cbind", d10x.data)
experiment.aggregate <- CreateSeuratObject(
experiment.data,
project = experiment_name,
min.cells = 0,
min.features = 300,
names.field = 2,
names.delim = "\\-")
experiment.aggregate
str(experiment.aggregate)
experiment.aggregate$percent.mito <- PercentageFeatureSet(experiment.aggregate, pattern = "^MT-")
summary(experiment.aggregate$percent.mito)
slotNames(experiment.aggregate)
head(experiment.aggregate[[]])
save(experiment.aggregate,file="original_seurat_object.RData")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/master/data_analysis/scRNA_Workshop-PART2.Rmd", "scRNA_Workshop-PART2.Rmd")
library(Seurat)
library(biomaRt)
library(ggplot2)
library(knitr)
library(kableExtra)
load(file="original_seurat_object.RData")
experiment.aggregate
set.seed(12345)
kable(do.call("cbind", tapply(experiment.aggregate$nFeature_RNA,
Idents(experiment.aggregate),quantile,probs=seq(0,1,0.05))),
caption = "5% Quantiles of Genes/Cell by Sample") %>% kable_styling()
kable(do.call("cbind", tapply(experiment.aggregate$nCount_RNA,
Idents(experiment.aggregate),quantile,probs=seq(0,1,0.05))),
caption = "5% Quantiles of UMI/Cell by Sample") %>% kable_styling()
kable(round(do.call("cbind", tapply(experiment.aggregate$percent.mito, Idents(experiment.aggregate),quantile,probs=seq(0,1,0.05))), digits = 3),
caption = "5% Quantiles of Percent Mitochondria by Sample") %>% kable_styling()
VlnPlot(
experiment.aggregate,
features = c("nFeature_RNA", "nCount_RNA","percent.mito"),
ncol = 1, pt.size = 0.3)
RidgePlot(experiment.aggregate, features=c("nFeature_RNA","nCount_RNA", "percent.mito"), ncol = 2)
plot(sort(Matrix::rowSums(GetAssayData(experiment.aggregate) >= 3), decreasing = TRUE) , xlab="gene rank", ylab="number of cells", main="Cells per genes (reads/gene >= 3 )")
FeatureScatter(experiment.aggregate, feature1 = "nCount_RNA", feature2 = "percent.mito", shuffle = TRUE) + geom_vline(xintercept = c(1000,12000)) + geom_hline(yintercept = 8)
FeatureScatter(experiment.aggregate, feature1 = "nFeature_RNA", feature2 = "percent.mito", shuffle = TRUE) + geom_vline(xintercept = 700) + geom_hline(yintercept = 8)
FeatureScatter(
experiment.aggregate, "nCount_RNA", "nFeature_RNA",
pt.size = 0.5, shuffle = TRUE)  + geom_vline(xintercept = c(1000,12000)) + geom_hline(yintercept = 700)
table(experiment.aggregate$orig.ident)
experiment.aggregate <- subset(experiment.aggregate, percent.mito <= 8)
experiment.aggregate <- subset(experiment.aggregate, nCount_RNA >= 1000 & nCount_RNA <= 12000)
experiment.aggregate <- subset(experiment.aggregate, nFeature_RNA >= 700)
experiment.aggregate
table(experiment.aggregate$orig.ident)
RidgePlot(experiment.aggregate, features=c("nFeature_RNA","nCount_RNA", "percent.mito"), ncol = 2)
experiment.aggregate
FilterGenes <-
function (object, min.value=1, min.cells = 0, genes = NULL) {
genes.use <- rownames(object)
if (!is.null(genes)) {
genes.use <- intersect(genes.use, genes)
object@data <- GetAssayData(object)[genes.use, ]
} else if (min.cells > 0) {
num.cells <- Matrix::rowSums(GetAssayData(object) > min.value)
genes.use <- names(num.cells[which(num.cells >= min.cells)])
object = object[genes.use, ]
}
object <- LogSeuratCommand(object = object)
return(object)
}
experiment.aggregate.genes <- FilterGenes(object = experiment.aggregate, min.value = 1, min.cells = 400)
experiment.aggregate.genes
rm(experiment.aggregate.genes)
experiment.aggregate <- NormalizeData(
object = experiment.aggregate,
normalization.method = "LogNormalize",
scale.factor = 10000)
# this code is for human samples only!
s.genes <- (cc.genes$s.genes)
g2m.genes <- (cc.genes$g2m.genes)
experiment.aggregate <- CellCycleScoring(experiment.aggregate,
s.features = s.genes,
g2m.features = g2m.genes,
set.ident = TRUE)
table(experiment.aggregate@meta.data$Phase) %>%
kable(caption = "Number of Cells in each Cell Cycle Stage", col.names = c("Stage", "Count"), align = "c") %>%
kable_styling()
table(Idents(experiment.aggregate))
## So lets change it back to sample name
Idents(experiment.aggregate) <- "orig.ident"
table(Idents(experiment.aggregate))
experiment.aggregate <- FindVariableFeatures(
object = experiment.aggregate,
selection.method = "vst")
length(VariableFeatures(experiment.aggregate))
top10 <- head(VariableFeatures(experiment.aggregate), 10)
top10
vfp1 <- VariableFeaturePlot(experiment.aggregate)
vfp1 <- LabelPoints(plot = vfp1, points = top10, repel = TRUE)
vfp1
dim(experiment.aggregate)
min.value = 2
min.cells = 10
num.cells <- Matrix::rowSums(GetAssayData(experiment.aggregate, slot = "count") > min.value)
genes.use <- names(num.cells[which(num.cells >= min.cells)])
length(genes.use)
VariableFeatures(experiment.aggregate) <- genes.use
save(experiment.aggregate, file="pre_sample_corrected.RData")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/master/data_analysis/scRNA_Workshop-PART3.Rmd", "scRNA_Workshop-PART3.Rmd")
library(Seurat)
load(file="pre_sample_corrected.RData")
experiment.aggregate
experiment.test <- experiment.aggregate
VariableFeatures(experiment.test) <- rownames(experiment.test)
set.seed(12345)
samplename = experiment.aggregate$orig.ident
rand.cells <- sample(1:ncol(experiment.test), 2000,replace = F)
batchid = rep("Example_Batch1",length(samplename))
batchid[rand.cells] = "Example_Batch2"
names(batchid) = colnames(experiment.aggregate)
experiment.test <- AddMetaData(
object = experiment.test,
metadata = batchid,
col.name = "example_batchid")
table(experiment.test$example_batchid)
mat <- as.matrix(GetAssayData(experiment.test, slot="data"))
rand.genes <- sample(VariableFeatures(experiment.test), 500,replace = F)
mat[rand.genes,experiment.test$example_batchid=="Example_Batch2"] <- mat[rand.genes,experiment.test$example_batchid=="Example_Batch2"] + 0.22
experiment.test = SetAssayData(experiment.test, slot="data", new.data= mat )
rm(mat)
experiment.test.noc <- ScaleData(object = experiment.test)
experiment.test.noc <- RunPCA(object = experiment.test.noc)
DimPlot(object = experiment.test.noc, group.by = "example_batchid", reduction = "pca")
DimPlot(object = experiment.test.noc, group.by = "example_batchid", dims = c(2,3), reduction = "pca")
DimPlot(object = experiment.test.noc, group.by = "example_batchid", reduction = "pca", shuffle = TRUE)
DimPlot(object = experiment.test.noc, group.by = "example_batchid", dims = c(2,3), reduction = "pca", shuffle = TRUE)
ElbowPlot(experiment.test.noc)
pcs.use <- 10
experiment.test.noc <- RunTSNE(object = experiment.test.noc, dims = 1:pcs.use)
DimPlot(object = experiment.test.noc,  group.by = "example_batchid", shuffle = TRUE)
experiment.test.regress <- ScaleData(object = experiment.test,
vars.to.regress = c("example_batchid"), model.use = "linear")
experiment.test.regress <- RunPCA(object =experiment.test.regress,features=rownames(experiment.test.noc))
DimPlot(object = experiment.test.regress, group.by = "example_batchid", reduction = "pca", shuffle = TRUE)
DimPlot(object = experiment.test.regress, group.by = "example_batchid", dims = c(2,3), reduction = "pca", shuffle = TRUE)
experiment.test.regress <- RunTSNE(object = experiment.test.regress, dims.use = 1:50)
DimPlot(object = experiment.test.regress, group.by = "example_batchid", reduction = "tsne")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/main/data_analysis/scRNA_Workshop-PART4.Rmd", "scRNA_Workshop-PART4.Rmd")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/main/data_analysis/scRNA_Workshop-PART2.Rmd", "scRNA_Workshop-PART2.Rmd")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2022-March-Single-Cell-RNA-Seq-Analysis/main/data_analysis/scRNA_Workshop-PART4.Rmd", "scRNA_Workshop-PART4.Rmd")
library(Seurat)
load(file="pre_sample_corrected.RData")
experiment.aggregate
experiment.test <- experiment.aggregate
VariableFeatures(experiment.test) <- rownames(experiment.test)
set.seed(12345)
samplename = experiment.aggregate$orig.ident
rand.cells <- sample(1:ncol(experiment.test), 2000,replace = F)
batchid = rep("Example_Batch1",length(samplename))
batchid[rand.cells] = "Example_Batch2"
names(batchid) = colnames(experiment.aggregate)
experiment.test <- AddMetaData(
object = experiment.test,
metadata = batchid,
col.name = "example_batchid")
table(experiment.test$example_batchid)
mat <- as.matrix(GetAssayData(experiment.test, slot="data"))
rand.genes <- sample(VariableFeatures(experiment.test), 500,replace = F)
mat[rand.genes,experiment.test$example_batchid=="Example_Batch2"] <- mat[rand.genes,experiment.test$example_batchid=="Example_Batch2"] + 0.22
experiment.test = SetAssayData(experiment.test, slot="data", new.data= mat )
rm(mat)
?ScaleData
experiment.test.noc <- ScaleData(object = experiment.test)
experiment.test.noc <- RunPCA(object = experiment.test.noc)
library(Seurat)
library(ggplot2)
load(file="pre_sample_corrected.RData")
experiment.aggregate
experiment.aggregate <- ScaleData(
object = experiment.aggregate,
vars.to.regress = c("S.Score", "G2M.Score", "percent.mito", "nFeature_RNA"))
experiment.aggregate <- RunPCA(object = experiment.aggregate, npcs=100)
save(experiment.aggregate, file="pca_sample_corrected.RData")
